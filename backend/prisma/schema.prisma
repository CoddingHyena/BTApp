// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RawMech {
  id          String   @id @default(uuid())
  dbId        Int      @unique // DBID из CSV
  name        String   // Name/Model
  unitType    String   // Unit Type
  technology  String   // Technology
  chassis     String   // Chassis
  era         String   // Era
  year        Int      // Year
  rulesLevel  String   // Rules Level (Era)
  tonnage     Float    // Tonnage
  battleValue Int      // Battle Value
  pointValue  Int      // Point Value
  cost        Float?   // Cost
  rating      String?  // Rating
  designer    String?  // Designer
  
  // Новое поле для отслеживания статуса валидации
  validated   Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связь с проверенными мехами
  mechs       Mech[]

  @@map("raw_mechs")
}

// Новая модель для проверенных мехов
model Mech {
  id          String   @id @default(uuid())
  dbId        Int      @unique // DBID из CSV
  name        String   // Name/Model
  unitType    String   // Unit Type
  technology  String   // Technology
  chassis     String   // Chassis
  era         String   // Era
  year        Int      // Year
  rulesLevel  String   // Rules Level (Era)
  tonnage     Float    // Tonnage
  battleValue Int      // Battle Value
  pointValue  Int      // Point Value
  cost        Float?   // Cost
  rating      String?  // Rating
  designer    String?  // Designer
  alphaCard   String?  // Ссылка на изображение Alpha Strike карточки
  recSheet    String?  // Ссылка на изображение Record Sheet
  vid         String?  // Ссылка на видео/изображение меха в действии
  
  // Связь с исходными данными
  rawMechId   String?
  rawMech     RawMech? @relation(fields: [rawMechId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связь с доступностями
  availabilities MechAvailability[]

  @@map("mechs")
}

model Period {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  code           String   @unique
  startYear      Int
  endYear        Int?     // Может быть null для текущих периодов
  sortOrder      Int      @unique // Уникальный порядок сортировки
  description    String?  @db.Text
  imageUrl       String?  // Путь к изображению периода
  bannerUrl      String?  // Путь к баннеру периода
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Связь с доступностями
  mechAvailabilities MechAvailability[]

  @@map("periods")
}

model Faction {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  code           String   @unique
  primaryColor   String?  // HEX код основного цвета
  secondaryColor String?  // HEX код вторичного цвета
  formationYear  Int?     // Год формирования фракции
  dissolutionYear Int?    // Год роспуска фракции (null если существует)
  description    String?  @db.Text
  logoUrl        String?  // Путь к логотипу/гербу
  bannerUrl      String?  // Путь к баннеру фракции
  gameIdRef      String?  // Ссылка на модель Game
  game           Game?    @relation(fields: [gameIdRef], references: [id])
  isMajor        Boolean  @default(false) // Флаг для основных фракций
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Связь с доступностями
  mechAvailabilities MechAvailability[]

  @@map("factions")
}

model MechAvailability {
  id                String    @id @default(uuid())
  
  // Изменение связи с RawMech на Mech
  mechId            String    // Ссылка на Mech
  mech              Mech      @relation(fields: [mechId], references: [id], onDelete: Cascade)
  

  factionId         Int       // Ссылка на Faction
  periodId          Int       // Ссылка на Period
  availabilityLevel String    // Уровень доступности
  introducedYear    Int?      // Год введения меха
  notes             String?   @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Отношения с другими моделями
  faction           Faction   @relation(fields: [factionId], references: [id], onDelete: Cascade)
  period            Period    @relation(fields: [periodId], references: [id], onDelete: Cascade)

  // Уникальный индекс для предотвращения дублирования
  @@unique([mechId, factionId, periodId])
  @@map("mech_availabilities")
}

model Mission {
  id             String    @id @default(uuid())
  code           String    @unique // Формат "BT-XXX" для быстрого поиска
  title          String
  description    String?   @db.Text // Общее описание миссии
  objectives     String[]  // Основные задачи: ["1. Захват точки", "2. Удержание 5 ходов"]
  type           MissionType
  difficulty     MissionDifficulty
  deploymentUrl  String?   // Схема расстановки (URL изображения)
  
  // Warchest система 
  cost           Int?      @default(0) // Стоимость в Warchest Points
  reward         Json?     // { points: Int, bonuses: String[] }
  
  // Метаданные
  source         String?   // Источник, например "Total Warfare, p.102"
  isOfficial     Boolean   @default(true) // false = пользовательская
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("missions")
}

model Game {
  id          String       @id @default(uuid())
  name        String       @unique // Название игры
  description String?      @db.Text // Описание игры
  category    GameCategory // Тип игры (тактическая, стратегическая, RPG)
  iconUrl     String?      // Путь к иконке/логотипу игры
  bannerUrl   String?      // Путь к баннеру игры
  isActive    Boolean      @default(true) // Активна ли игра
  sortOrder   Int          @unique // Порядок сортировки
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Связь с фракциями
  factions    Faction[]

  @@map("games")
}

enum MissionType {
  CLASSIC
  ALPHA_STRIKE
}

enum MissionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum GameType {
  CLASSIC_BT
  ALPHA_STRIKE
}

enum GameCategory {
  TACTICAL
  STRATEGIC
  RPG
  BOARD_GAME
  MINIATURES
}

// Enum для ролей пользователей
enum UserRole {
  PLAYER
  MODERATOR
  ADMIN
}

// Модель пользователя
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  password  String   // Хешированный пароль
  role      UserRole @default(PLAYER)
  
  // Метаданные
  firstName String?
  lastName  String?
  avatar    String?  // URL аватара
  
  // Статус аккаунта
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  
  // Временные метки
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Refresh токены (для JWT)
  refreshTokens RefreshToken[]
  
  @@map("users")
}

// Модель для refresh токенов
model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Метаданные токена
  expiresAt   DateTime
  isRevoked   Boolean  @default(false)
  
  // IP и User Agent для безопасности
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime @default(now())
  
  @@map("refresh_tokens")
}