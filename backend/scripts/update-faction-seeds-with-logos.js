const fs = require('fs');
const path = require('path');

// –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
const manualFactionLogoMapping = {
  'Federated Suns': 'DavionLogo.png',
  'Clan Ghost Bear': 'GhostBearLogo.png', 
  'Capellan Confederation': 'HouseLiaoLogo.png',
  'Kell Hounds': 'imagesKH.jpg',
  'Free Worlds League': 'MaricLogo.png'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
function cleanFileName(filename) {
  return filename
    .replace(/\.(png|jpg|jpeg|svg)$/i, '') // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    .toLowerCase()
    .replace(/[^a-z0-9\s]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
function cleanFactionName(factionName) {
  return factionName
    .toLowerCase()
    .replace(/[^a-z0-9\s]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å —Ñ—Ä–∞–∫—Ü–∏—è–º–∏
function autoMatchFactionToLogo(factionName, availableFiles) {
  const cleanFactionNameResult = cleanFactionName(factionName);
  
  for (const file of availableFiles) {
    const cleanFileNameResult = cleanFileName(file);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (cleanFileNameResult === cleanFactionNameResult) {
      return file;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏)
    if (cleanFileNameResult.includes(cleanFactionNameResult) || cleanFactionNameResult.includes(cleanFileNameResult)) {
      return file;
    }
  }
  
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ seed —Ñ–∞–π–ª–∞
function readCurrentSeedFile() {
  const seedFilePath = path.join(__dirname, '..', 'prisma', 'seeds', 'faction.seeds.ts');
  return fs.readFileSync(seedFilePath, 'utf8');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤
function scanLogosDirectory() {
  const logosDir = path.join(__dirname, '..', 'public', 'uploads', 'factions', 'logos');
  
  if (!fs.existsSync(logosDir)) {
    console.log('‚ö†Ô∏è  –ü–∞–ø–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', logosDir);
    return [];
  }
  
  const files = fs.readdirSync(logosDir);
  return files.filter(file => {
    const ext = path.extname(file).toLowerCase();
    return ['.png', '.jpg', '.jpeg', '.svg'].includes(ext);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è seed —Ñ–∞–π–ª–∞
function updateSeedFile(factions, availableFiles) {
  const seedFilePath = path.join(__dirname, '..', 'prisma', 'seeds', 'faction.seeds.ts');
  const currentContent = fs.readFileSync(seedFilePath, 'utf8');
  
  // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ñ—Ä–∞–∫—Ü–∏–π
  const updatedFactions = factions.map(faction => {
    const updatedFaction = { ...faction };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω–æ–π –º–∞–ø–ø–∏–Ω–≥
    if (manualFactionLogoMapping[faction.name]) {
      const mappedFile = manualFactionLogoMapping[faction.name];
      if (availableFiles.includes(mappedFile)) {
        updatedFaction.logoUrl = `factions/logos/${mappedFile}`;
        console.log(`‚úÖ –†—É—á–Ω–æ–π –º–∞–ø–ø–∏–Ω–≥: ${faction.name} ‚Üí ${mappedFile}`);
      } else {
        console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞: ${faction.name} ‚Üí ${mappedFile}`);
      }
    } else {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
      const matchedFile = autoMatchFactionToLogo(faction.name, availableFiles);
      if (matchedFile) {
        updatedFaction.logoUrl = `factions/logos/${matchedFile}`;
        console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: ${faction.name} ‚Üí ${matchedFile}`);
      } else {
        console.log(`‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è: ${faction.name}`);
      }
    }
    
    return updatedFaction;
  });
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç seed —Ñ–∞–π–ª–∞
  const factionsString = updatedFactions.map(faction => {
    const lines = [
      '      {',
      `        name: '${faction.name}',`,
      `        code: '${faction.code}',`,
      `        primaryColor: '${faction.primaryColor}',`,
      `        secondaryColor: '${faction.secondaryColor}',`,
      `        formationYear: ${faction.formationYear},`,
      faction.dissolutionYear ? `        dissolutionYear: ${faction.dissolutionYear},` : '        dissolutionYear: null,',
      `        description: '${faction.description}',`,
      `        logoUrl: '${faction.logoUrl}',`,
      `        bannerUrl: '${faction.bannerUrl}',`,
      `        gameIdRef: ${faction.gameIdRef},`,
      `        isMajor: ${faction.isMajor},`,
      `        isActive: ${faction.isActive},`,
      '      },'
    ];
    return lines.join('\n');
  }).join('\n\n');
  
  // –ó–∞–º–µ–Ω—è–µ–º –º–∞—Å—Å–∏–≤ —Ñ—Ä–∞–∫—Ü–∏–π –≤ seed —Ñ–∞–π–ª–µ
  const updatedContent = currentContent.replace(
    /const factions = \[[\s\S]*?\];/,
    `const factions = [\n\n${factionsString}\n\n    ];`
  );
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  fs.writeFileSync(seedFilePath, updatedContent);
  console.log(`\n‚úÖ Seed —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: ${seedFilePath}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ faction.seeds.ts —Å –ø—É—Ç—è–º–∏ –∫ –ª–æ–≥–æ—Ç–∏–ø–∞–º...\n');
  
  // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É –ª–æ–≥–æ—Ç–∏–ø–æ–≤
  const availableFiles = scanLogosDirectory();
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ—Ç–∏–ø–æ–≤: ${availableFiles.length}`);
  availableFiles.forEach(file => console.log(`   - ${file}`));
  console.log('');
  
  // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π seed —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏
  const currentContent = readCurrentSeedFile();
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –±–ª–æ–∫–∞ factions
  const factionsBlockMatch = currentContent.match(/const factions = \[([\s\S]*?)\];/);
  let factionNames = [];
  
  if (factionsBlockMatch) {
    const factionsBlock = factionsBlockMatch[1];
    const factionMatches = factionsBlock.match(/name: '([^']+)'/g);
    let allNames = factionMatches ? factionMatches.map(match => match.replace("name: '", "").replace("'", "")) : [];
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∏–≥—Ä—ã –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
    const gameNames = ['Battletech', 'Trench Crusade'];
    factionNames = allNames.filter(name => !gameNames.includes(name));
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    factionNames = [...new Set(factionNames)];
  }
  
  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ñ—Ä–∞–∫—Ü–∏–π –≤ seed: ${factionNames.length}`);
  factionNames.forEach(name => console.log(`   - ${name}`));
  console.log('');
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Ñ—Ä–∞–∫—Ü–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const factions = factionNames.map(name => ({
    name,
    code: 'TEMP',
    primaryColor: '#FFD700',
    secondaryColor: '#000080',
    formationYear: 2571,
    dissolutionYear: null,
    description: 'Temporary description',
    logoUrl: 'factions/logos/temp.png',
    bannerUrl: 'factions/banners/temp.jpg',
    gameIdRef: 'temp',
    isMajor: false,
    isActive: true,
  }));
  
  // –û–±–Ω–æ–≤–ª—è–µ–º seed —Ñ–∞–π–ª
  updateSeedFile(factions, availableFiles);
  
  console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π faction.seeds.ts');
  console.log('2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø—É—Ç–∏ –≤—Ä—É—á–Ω—É—é');
  console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ seed –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main();
}

module.exports = { main }; 